// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package loginrisk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LoginRiskClient is the client API for LoginRisk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginRiskClient interface {
	LoginRiskControl(ctx context.Context, in *LoginRiskRequest, opts ...grpc.CallOption) (*LoginRiskReply, error)
}

type loginRiskClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginRiskClient(cc grpc.ClientConnInterface) LoginRiskClient {
	return &loginRiskClient{cc}
}

func (c *loginRiskClient) LoginRiskControl(ctx context.Context, in *LoginRiskRequest, opts ...grpc.CallOption) (*LoginRiskReply, error) {
	out := new(LoginRiskReply)
	err := c.cc.Invoke(ctx, "/loginrisk.LoginRisk/LoginRiskControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginRiskServer is the server API for LoginRisk service.
// All implementations must embed UnimplementedLoginRiskServer
// for forward compatibility
type LoginRiskServer interface {
	LoginRiskControl(context.Context, *LoginRiskRequest) (*LoginRiskReply, error)
	mustEmbedUnimplementedLoginRiskServer()
}

// UnimplementedLoginRiskServer must be embedded to have forward compatible implementations.
type UnimplementedLoginRiskServer struct {
}

func (*UnimplementedLoginRiskServer) LoginRiskControl(context.Context, *LoginRiskRequest) (*LoginRiskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginRiskControl not implemented")
}
func (*UnimplementedLoginRiskServer) mustEmbedUnimplementedLoginRiskServer() {}

func RegisterLoginRiskServer(s *grpc.Server, srv LoginRiskServer) {
	s.RegisterService(&_LoginRisk_serviceDesc, srv)
}

func _LoginRisk_LoginRiskControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRiskServer).LoginRiskControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loginrisk.LoginRisk/LoginRiskControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRiskServer).LoginRiskControl(ctx, req.(*LoginRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoginRisk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loginrisk.LoginRisk",
	HandlerType: (*LoginRiskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginRiskControl",
			Handler:    _LoginRisk_LoginRiskControl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loginrisk/loginrisk.proto",
}
