// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AmusingxUserServiceClient is the client API for AmusingxUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AmusingxUserServiceClient interface {
	Pong(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*PongResponse, error)
	Regexps(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*RegexpResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	CountryCodes(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*CountryCodeList, error)
	GetVerificationCode(ctx context.Context, in *VerificationCodeRequest, opts ...grpc.CallOption) (*VerificationCodeResponse, error)
	VerificationCodeCheck(ctx context.Context, in *VerificationCodeCheckRequest, opts ...grpc.CallOption) (*VerificationCodeCheckResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
}

type amusingxUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAmusingxUserServiceClient(cc grpc.ClientConnInterface) AmusingxUserServiceClient {
	return &amusingxUserServiceClient{cc}
}

func (c *amusingxUserServiceClient) Pong(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, "/userservice.AmusingxUserService/Pong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amusingxUserServiceClient) Regexps(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*RegexpResponse, error) {
	out := new(RegexpResponse)
	err := c.cc.Invoke(ctx, "/userservice.AmusingxUserService/Regexps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amusingxUserServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/userservice.AmusingxUserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amusingxUserServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/userservice.AmusingxUserService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amusingxUserServiceClient) CountryCodes(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*CountryCodeList, error) {
	out := new(CountryCodeList)
	err := c.cc.Invoke(ctx, "/userservice.AmusingxUserService/CountryCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amusingxUserServiceClient) GetVerificationCode(ctx context.Context, in *VerificationCodeRequest, opts ...grpc.CallOption) (*VerificationCodeResponse, error) {
	out := new(VerificationCodeResponse)
	err := c.cc.Invoke(ctx, "/userservice.AmusingxUserService/GetVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amusingxUserServiceClient) VerificationCodeCheck(ctx context.Context, in *VerificationCodeCheckRequest, opts ...grpc.CallOption) (*VerificationCodeCheckResponse, error) {
	out := new(VerificationCodeCheckResponse)
	err := c.cc.Invoke(ctx, "/userservice.AmusingxUserService/VerificationCodeCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amusingxUserServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, "/userservice.AmusingxUserService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmusingxUserServiceServer is the server API for AmusingxUserService service.
// All implementations must embed UnimplementedAmusingxUserServiceServer
// for forward compatibility
type AmusingxUserServiceServer interface {
	Pong(context.Context, *BlankParams) (*PongResponse, error)
	Regexps(context.Context, *BlankParams) (*RegexpResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	CountryCodes(context.Context, *BlankParams) (*CountryCodeList, error)
	GetVerificationCode(context.Context, *VerificationCodeRequest) (*VerificationCodeResponse, error)
	VerificationCodeCheck(context.Context, *VerificationCodeCheckRequest) (*VerificationCodeCheckResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	mustEmbedUnimplementedAmusingxUserServiceServer()
}

// UnimplementedAmusingxUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAmusingxUserServiceServer struct {
}

func (*UnimplementedAmusingxUserServiceServer) Pong(context.Context, *BlankParams) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pong not implemented")
}
func (*UnimplementedAmusingxUserServiceServer) Regexps(context.Context, *BlankParams) (*RegexpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Regexps not implemented")
}
func (*UnimplementedAmusingxUserServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedAmusingxUserServiceServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedAmusingxUserServiceServer) CountryCodes(context.Context, *BlankParams) (*CountryCodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountryCodes not implemented")
}
func (*UnimplementedAmusingxUserServiceServer) GetVerificationCode(context.Context, *VerificationCodeRequest) (*VerificationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerificationCode not implemented")
}
func (*UnimplementedAmusingxUserServiceServer) VerificationCodeCheck(context.Context, *VerificationCodeCheckRequest) (*VerificationCodeCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationCodeCheck not implemented")
}
func (*UnimplementedAmusingxUserServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (*UnimplementedAmusingxUserServiceServer) mustEmbedUnimplementedAmusingxUserServiceServer() {}

func RegisterAmusingxUserServiceServer(s *grpc.Server, srv AmusingxUserServiceServer) {
	s.RegisterService(&_AmusingxUserService_serviceDesc, srv)
}

func _AmusingxUserService_Pong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmusingxUserServiceServer).Pong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userservice.AmusingxUserService/Pong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmusingxUserServiceServer).Pong(ctx, req.(*BlankParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmusingxUserService_Regexps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmusingxUserServiceServer).Regexps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userservice.AmusingxUserService/Regexps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmusingxUserServiceServer).Regexps(ctx, req.(*BlankParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmusingxUserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmusingxUserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userservice.AmusingxUserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmusingxUserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmusingxUserService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmusingxUserServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userservice.AmusingxUserService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmusingxUserServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmusingxUserService_CountryCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmusingxUserServiceServer).CountryCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userservice.AmusingxUserService/CountryCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmusingxUserServiceServer).CountryCodes(ctx, req.(*BlankParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmusingxUserService_GetVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmusingxUserServiceServer).GetVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userservice.AmusingxUserService/GetVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmusingxUserServiceServer).GetVerificationCode(ctx, req.(*VerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmusingxUserService_VerificationCodeCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationCodeCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmusingxUserServiceServer).VerificationCodeCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userservice.AmusingxUserService/VerificationCodeCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmusingxUserServiceServer).VerificationCodeCheck(ctx, req.(*VerificationCodeCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmusingxUserService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmusingxUserServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userservice.AmusingxUserService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmusingxUserServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AmusingxUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userservice.AmusingxUserService",
	HandlerType: (*AmusingxUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pong",
			Handler:    _AmusingxUserService_Pong_Handler,
		},
		{
			MethodName: "Regexps",
			Handler:    _AmusingxUserService_Regexps_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AmusingxUserService_Login_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _AmusingxUserService_Join_Handler,
		},
		{
			MethodName: "CountryCodes",
			Handler:    _AmusingxUserService_CountryCodes_Handler,
		},
		{
			MethodName: "GetVerificationCode",
			Handler:    _AmusingxUserService_GetVerificationCode_Handler,
		},
		{
			MethodName: "VerificationCodeCheck",
			Handler:    _AmusingxUserService_VerificationCodeCheck_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AmusingxUserService_ResetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
