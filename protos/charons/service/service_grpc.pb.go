// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package charonservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CharonServClient is the client API for CharonServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharonServClient interface {
	Pong(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*PongResponse, error)
	Create(ctx context.Context, in *CategoryCreateRequest, opts ...grpc.CallOption) (*CategoryCreateResponse, error)
}

type charonServClient struct {
	cc grpc.ClientConnInterface
}

func NewCharonServClient(cc grpc.ClientConnInterface) CharonServClient {
	return &charonServClient{cc}
}

func (c *charonServClient) Pong(ctx context.Context, in *BlankParams, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, "/charonservice.CharonServ/Pong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charonServClient) Create(ctx context.Context, in *CategoryCreateRequest, opts ...grpc.CallOption) (*CategoryCreateResponse, error) {
	out := new(CategoryCreateResponse)
	err := c.cc.Invoke(ctx, "/charonservice.CharonServ/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharonServServer is the server API for CharonServ service.
// All implementations must embed UnimplementedCharonServServer
// for forward compatibility
type CharonServServer interface {
	Pong(context.Context, *BlankParams) (*PongResponse, error)
	Create(context.Context, *CategoryCreateRequest) (*CategoryCreateResponse, error)
	mustEmbedUnimplementedCharonServServer()
}

// UnimplementedCharonServServer must be embedded to have forward compatible implementations.
type UnimplementedCharonServServer struct {
}

func (UnimplementedCharonServServer) Pong(context.Context, *BlankParams) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pong not implemented")
}
func (UnimplementedCharonServServer) Create(context.Context, *CategoryCreateRequest) (*CategoryCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCharonServServer) mustEmbedUnimplementedCharonServServer() {}

// UnsafeCharonServServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharonServServer will
// result in compilation errors.
type UnsafeCharonServServer interface {
	mustEmbedUnimplementedCharonServServer()
}

func RegisterCharonServServer(s grpc.ServiceRegistrar, srv CharonServServer) {
	s.RegisterService(&CharonServ_ServiceDesc, srv)
}

func _CharonServ_Pong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharonServServer).Pong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonservice.CharonServ/Pong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharonServServer).Pong(ctx, req.(*BlankParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharonServ_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharonServServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonservice.CharonServ/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharonServServer).Create(ctx, req.(*CategoryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharonServ_ServiceDesc is the grpc.ServiceDesc for CharonServ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharonServ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "charonservice.CharonServ",
	HandlerType: (*CharonServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pong",
			Handler:    _CharonServ_Pong_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CharonServ_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
